---
title: Getting familiar with Notebooks
---

::: {#highlights .callout-note icon=false title='In this section...'}

- Learn how to use Jupyter Notebooks, including code execution, markdown documentation, and inline visualizations
:::

::: {#answerN .callout-warning icon=false title='Trainer notes' collapse="true"}
Recommended time: 15 minutes

Even if some students may not understand some of the python code below, they can copy-paste it for now. The key point is getting familiar with Jupyter Notebooks interface.
:::

This course will use a tool called *Jupyter Notebooks* to run your Python code. Once Anaconda is installed, start "Anaconda Navigator" and press the JupyterLab button on the main screen:

To open a notebook, follow our [setup instructions](https://bristol-training.github.io/data-science-project-setup/). Once you have JupyterLab running, you can create a new notebook by clicking on the Python icon under the "Notebook" section of the launcher tab

Once the notebook is launched, you will see a wide grey box with a blue `[ ]:` to the left. The grey box is an input cell where you type any Python code you want to run:

```{python}
# Python code can be written in 'Code' cells
print("Output appears below when the cell is run")
print("To run a cell, press Ctrl-Enter or Shift-Enter with the cursor inside")
print("or use the run button (▶) in the toolbar at the top")
```

In your notebook, type the following in the first cell and then run it with Shift-Enter, you should see the same output:

```{python}
a = 5
b = 7
a + b
```

The cells in a notebook are linked together so a variable defined in one is available in all the cells from that point on so in the second cell you can use the variables `a` and `b`:

```{python}
a - b
```

Some Python libraries have special integration with Jupyter notebooks and so can display their output directly into the page. For example `pandas` will format tables of data nicely and `matplotlib` will embed graphs directly:

```{python}
import pandas as pd
temp = pd.DataFrame(
    [3.1, 2.4, 4.8, 4.1, 3.4, 4.2],
    columns=["temp (°C)"],
    index=pd.RangeIndex(2000, 2006, name="year")
)
temp
```

```{python}
temp.plot()
```

## Markdown

If you want to write some text as documentation (like these words here) then you should label the cell as being a Markdown cell. Do that by selecting the cell and going to the dropdown at the top of the page labelled *Code* and changing it to *Markdown*.

It is becomming common for people to use Jupyter notebooks as a sort of lab notebook where they document their processes, interspersed with code. This style of working where you give prose and code equal weight is sometimes called *literate programming*.


::: {#exercise-1 .callout-note title="Exercise" icon=false} 

Take the following code and break it down, chunk by chunk, interspersing it with documentation explaining what each part does using Markdown blocks:
```{python}
#| output: false
prices = {
    "apple": 0.40,
    "banana": 0.50,
}

my_basket = {
    "apple": 1,
    "banana": 6,
}

total_grocery_bill = 0
for fruit, count in my_basket.items():
    total_grocery_bill += prices[fruit] * count

print(f"I owe the grocer £{total_grocery_bill:.2f}")
```
You don't need to put only one line of code per cell, it makes sense sometimes to group some lines together.

Throughout this course, use the Jupyter Notebook to solve the problems. Follow along with the examples, typing them into your own notebooks and see how they work.
:::

::: {#answer1 .callout-caution icon=false title='Answer' collapse="true"}
Your notebook could look similar to:

## My first notebook

We first define the price of apples and bananas.
```{python}
prices = {
    "apple": 0.40,
    "banana": 0.50,
}
```
Then we state how many apples and bananas we have in the basket.
```{python}
my_basket = {
    "apple": 1,
    "banana": 6,
}
```

For each fruit in the basket we calculate the price to pay and add it to the total bill. 
```{python}
total_grocery_bill = 0
for fruit, count in my_basket.items():
    total_grocery_bill += prices[fruit] * count
```

We print a message with the total owed to the shop.
```{python}
print(f"I owe the grocer £{total_grocery_bill:.2f}")
```

:::
